* Ruby Notes
 * Ruby Quirks
	 ** define method
 * Ruby Tricks
	 #+NAME: Define Method
	 #+BEGIN_SRC ruby -n -r
    def name
      "Pankaj"
    end
    name
	 #+END_SRC
	 
  #+RESULTS: Define
	 =Pankaj
		=	 
 * Rake Tasks
	 * Argument in a rake task
     #+BEGIN_SRC ruby
      Consider a rake task : 
      task :test, [:arguments] => [:setup] do
        ['spec', 'support'].each{ |dir| $: << dir }
       Dir['spec/*_spec.rb'].each {|file| require File.basename(file , '.rb') }
      end

     task :setup , :arguments  do |taskname , params|
       ENV["VERBOSE"]="true" if params[:arguments] == "verbose"
     end
		 
		 #+END_SRC
		 [[Explanation][BEGIN]]
		 What is happening above is a rake task called test depends upon another task called setup
		 and we are passing the :arguments as first parameter to test task upon invocation which in turn
	   is passed to setup task in a hash with key as :arguments inside the block you get two parameters
     first is the task name which is set up in this case and other is the arguments hash.
		 
		 In order to invole above task : rake test[verbose] , we call the test task and pass verbose param.
		 [[Explanation][END]]

* JS Notes
* Bash Reference
	* Bash Expressions
		1) Assignment
			let A=1
			let A=1+2
			let "A = 1 + 2" -> For spaces in Assignments.
			 
		2) Expressions
			expr 1 + 3
			=> 4
			A="expr 1 + 3"
			$A
			=> 4

		3) 
			
* Rules in Toothbrush
	## Like any other Language 'toothbrush' has a way of looking at the syntax of the language to be parsed from
	a certain perspective of solving problems and improving readability.

	* Syntax Rules

		1. All constants in toothbrush should look like RUBY_CONSTANTS and internally they should be using
			 the command (by convention anything beginning with a capital is constant) :
			 
			 #+BEGIN_SRC sh
	       =>  readonly A="pankaj" or 
			   =>  declare -r A=123
			 #+END_SRC

			 #+BEGIN_SRC python
         A = "pankaj"
	     #+END_SRC
			
		2. Simple Expressions
			 * Variable Declaration in bash
				 #+BEGIN_SRC sh
           a=1
           b=2
           echo $((a + b))
	       #+END_SRC
		   * Variable Declaration in toothbrush
         #+BEGIN_SRC python
           a = 1
           b = 2
           echo a + b
         #+END_SRC
			 * Alias Syntax in bash
				 #+BEGIN_SRC sh
           alias lsd='ls -l'
				 #+END_SRC
			 * Alias Special Syntax toothbrush
				 #+BEGIN_SRC sh
           lsd -> 'ls -l'
				 #+END_SRC
				 
		3. Hash declaration
			 * A declaration in bash
			   #+NAME: Declaration in Bash
			   #+BEGIN_SRC sh
          declare -A food=()
          food=(["sweet"]="honey") or food["fish"]="Tuna"
          echo ${food["sweet"]}
			   #+END_SRC
	     * A declaration in toothbrush
			   #+BEGIN_SRC python
          food = { "fruit" : "Apple" , "fish" : "Tuna" }
				  food["goofy"]="Stupid T"

				  To Access:
				  food["fruit"] 
				  =>  "Apple"
				 #+END_SRC

		4. Function declaration
			 * A function declaration in bash
					#+NAME: Function in bash.
					#+BEGIN_SRC sh
					 function man(){ echo "hi"; }
					 man(){ echo "hi"; }
					#+END_SRC

  		 * A function declaration in toothbrush
					#+NAME: Function in toothbrush.
					#+BEGIN_SRC python
						man: param1 , param2
							echo param1, params2
							printf param1, param2
					#+END_SRC
				 
		5. Named Parameters
			 * A function with named parameters:
				   #+BEGIN_SRC python
				     >> myfunc() { local $*; echo "foo=$foo, bar=$bar"; }
				     >> myfunc bar=world foo=hello
				     >> foo=hello, bar=world
				   #+END_SRC 

			 * A named parameter in toothbrush
				   #+NAME: Name parameters in toothtbrush.
				   #+BEGIN_SRC python
					   myfunc: foo = param1 , bar = param2
						   echo foo , bar

					   myfunc bar = world , foo = hello
				   #+END_SRC

				 // We need a mechanism in  tooth brush to check for the passed parameters while calling so 
				 // that it can throw 1 for 2 error etc.
				 
		6. Simple Manipulation

		7. String Interpolation
			 
			 * A String Interpolation Example in Bash
				 #+BEGIN_SRC sh
    			 for i in $(seq 1 10);do p=$(printf "The Number is : %03d" $i); echo $p; done) #Zero Padded example.
		    	 for i in $(seq 1 10);do p=$(echo "The Number is : $i"); echo $p; done")
				 #+END_SRC
				 
			 * A String Interpolation Example in Toothbrush
				 #+BEGIN_SRC python
				   for i in (1..10)
             printf "The Number is : #{%03d}", i
             echo "The Number is : #{i}"
				 #+END_SRC
		8. Array Declaration

			 * An Array Declaration in  Bash
				 #+BEGIN_SRC sh
           A=(1 2 3 4)
           echo ${A[0]}
           
           echo ${A[@]} print all elements

           A=("pankaj" "alex" "neeraj")
           echo ${A[0]} 
           echo ${#A[1]} #to find length of nth element.

           echo ${A[@]} | wc -w  => array Size.
           echo ${A[@]} | tr " " "+" | bc
				 #+END_SRC
				 
			 * An Array Declaration in Toothbrush
				 #+BEGIN_SRC python
           A=[1,2,3]
           echo A[0]
           A[0..-1] for all elements
           A[0..-1]:size for size of array
	       #+END_SRC


	    * Sequence in bash
				#+BEGIN_SRC sh
          {0..9} or {A..Z} or {a..z} are sequences also seq 1 10 is the same but with newline seperator.
          echo {0..9} | tr " " "+" | bc => Adding a sequence of numbers.
          seq -s+ 1 10 | bc =>  where we changed the seperator default from '\n' newline to '+'
	      #+END_SRC
	
* Bash External References
  1. http://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
  2. http://aplawrence.com/Unix/getopts.html
  3. http://stackoverflow.com/questions/11279423/bash-getopts-with-multiple-and-mandatory-options
	4. http://wiki.bash-hackers.org/howto/getopts_tutorial
	5. http://stackoverflow.com/questions/1965080/how-to-use-tags-in-git?lq=1
	6. http://www.ibm.com/developerworks/library/l-bash-test/
	7. http://www.linuxjournal.com/content/bash-declare-statement
	8. http://floppix.com/scripts1.html
	9. http://bash.cyberciti.biz/guide/Declare_command
	10. http://linux.about.com/library/cmd/blcmdl1_builtin.htm
	11. http://www.thegeekstuff.com/2010/06/bash-array-tutorial/
	12. http://stackoverflow.com/questions/2764051/joining-multiple-lines-into-one-with-bash
	13. http://stackoverflow.com/questions/7442417/how-to-sort-an-array-in-bash
	14. http://stackoverflow.com/questions/6242311/quickly-get-index-of-array-element-in-ruby

* Stuff
	1. ruby quiz
* Nice Quotes
	#+TITLE: Thought provoking quotes:
	#+BEGIN_QUOTE:
  *	If you focus on results you will never change, but if you focus on change you will get results. 
	* Its never too late untill you think it to be so.
	* If you think you have a good idea try it -- Michael Dell
	* Our biggest weakness lies is giving up, the most certain way to succeed is always to try just one more time -- Thomas Alva Edison.
	#+END_QUOTE

* TODO [0/2][0%]
	- [ ] Finish ToothBrush Lexing. [0/2][0%]
		- [ ] Regex for correct indentation.
		- [ ] You may need a rewriter for the token array.
	- [ ] Parser Stuff. [0/1][0%]
		- [ ] Generate Output From Parse Tree
